习惯规则：

命名：
    OC 中类名使用大驼峰规则，方法名（选择器名）和实例变量名使用小驼峰（C中都使用小驼峰?）（跟java一样的）
    类名不能和变量名及方法名相同，类中的方法名和实例变量名可以相同（很常见）

类：
    方法内部可以自由使用类的实例变量
    方法中的self值实例对象自身，是 OC 中内置的变量，self支持赋值等操作，也可以作为返回值返回，可以通过self调用类的实例变量和方法

实现文件：
    类的实现文件中定义的函数不能直接使用类中定义的实例变量和self变量，但可以作为参数传递给函数，访问实例变量和self变量的操作都应该被定义在类的方法中
    类中共有的功能更适合被定义成类方法，而非函数（公共类的复用是怎么实现的？？？）

混编风格：
    以下几种情况建议使用C语言函数：
    1、想使用成熟的C语言函数模块时；
    2、想使用以C语言声明的接口时，如Unix的系统调用等
    3、和面向对象没有关系，用于数学、计算等(例如 一个用于三角函数计算的函数，不需要特意将其定义为某个类的方法)；
    4、类定义时；
    5、对速度要求较高时（C函数调用的速度要比OC的方法调用快一点点，将反复调用e*5以上的功能改成函数调用就会快很多（这在实际使用中很少有这么高频次的调用吧？？））
    OC允许以面向对象思维对软件进行整体设计，并在开发实际过程中使用C语言来实现其中的关键模块，其协调统一则需要程序员的水平。

    类的实现文件中可以定义C语言风格函数，但仅限于和类的实现由直接关系的函数，可以定义在实现的任何位置，
    如果函数的作用域仅限于这个文件，则加上static修饰符比较好（《Objective-C 变成全解P25》中funC 实现比较靠后需要加上前置说明在哪里？什么时候需要前置说明?）

