id obj;

消息表达式 ：[obj msg]// obj 接收者  msg 消息
   
    可作为变量嵌套在语句中，或单独执行返回void
    允许嵌套
    例：element=table[[obj count]]//内层【】 为消息表达式修饰符，外层为数组修饰符，使用【obj count】 的结果作为table[] 数组的下标
    msg位置的参数被称为消息关键字，其末尾有“：”时，表示消息带有参数，“：”后紧跟着的就是实参，可以是变量，也可以是消息表达式
    例：[doc isSameDirectory:[info objectAtIndex:++num]];
    多参消息：
    [方法名 关键字1：a 关键字2：b 关键字3：c]  或 [方法名：a:b:c]
    例：[ manager fixExistsAtPath:dirname isDirectoty:&isdir]; 或[view lineTo:1.1:(y+1.0)];


消息选择器：消息名（选择器，方法）（对应消息表达式中msg位置？）(函数名？参数名？cell=[albumview cellAtRow:i column:j];)

    带有参数的消息选择器要包含“：”
    例：copy 和copy：是两个不同的选择器
    多参情况：cellAtRow: column:
    由多个消息关键字组成的选择器，关键字的顺序不能错，否则是完全不同的选择器


变量：

    同C一样，仅声明不会为变量赋初值
    OC通过向类发送消息来创建一个对象
    例：[类名 alloc]//alloc执行完同C一样为申请到存储空间，仍需调用初始化方法
    Cocoa中的初始化方法通常为init或由init开头的函数。
    例：[[类名 alloc] init] //完整地创建并初始化Cocoa中的某个类//通常嵌套调用alloc和init来生成一个对象
    tip:对象生成后知需调用一次初始化方法，init并没有reset功能,使变量的值恢复初始值需要专用函数，另外，有的类不是用alloc方法而使用其他方法生成对象，
    有的类也可能会返回一个初始化好的对象（OC中哪个系的类会？还是在自己实现中灵活运用？）



类的定义:(interface和implementat是分开的)（OC中的类由接口和实现组成？）

    语法：
    @interface 类名：父类名
    {
        实例变量的定义；
    }
    方法声明；
    @end

    OC中类接口的声明以@interface开头，以@end结尾，所有的OC编译指令都以@ 开头，以区分C中的字符串（关键字？）


方法声明：

    -(id)delegate; // "-"表示是实例方法，返回值使用“（）”括起来
    -(id)cellAtRow:(int)row column:(int) col;//参数的类型指定用“()”括起来放在参数之前，row和col是参数
    -(void)setAutoPlay(BOOL)falg;//无返回值时使用void表示


返回值：

    可以省略方法返回值，编译器默认增加id类型的返回值（不推荐，不清晰）
    tips:在C中省略返回值会默认增加int类型的返回值，但存在争议，有可以能以后会被废除


实现文件：

    类的实现文件中定义的函数不能直接使用类中定义的实例变量和self变量，但可以作为参数传递给函数，访问实例变量和self变量的操作都应该被定义在类的方法中
    类中共有的功能更适合被定义成类方法，而非函数（公共类的复用是怎么实现的？？？）



